<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0044)file://\\A-jbeck\share\text3d_sample_v5.html -->
</COMMENT><HTML><HEAD><TITLE>Shapes, Text3D & BlackHole Transform Demo</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<SCRIPT language=JScript>
<!--
if (window.top.frames.length!=0 && window.top.frames[0].ShowNoButtons!=null)
    window.top.frames[0].ShowNoButtons();
//-->
</SCRIPT>

<META content="MSHTML 5.00.2013.2100" name=GENERATOR></HEAD>
<BODY bgColor=white leftMargin=20>
<CENTER>
<H1>Shapes, Text3D & BlackHole Transform Demo in DirectAnimation</H1>
<OBJECT classid=CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D id=DAControl 
style="HEIGHT: 350px; WIDTH: 500px"></OBJECT></CENTER>
<SCRIPT language=JScript>
<!--
 m = DAControl.MeterLibrary;

 dim = 0.02;
 imgs = new Array(1);      
 imgs[0] = m.ImportImage("grid.jpg");

 textPosX = -.025;
 textPosY = .02;
 textPosZ = 0;
 textScale = 0.013;

 shapePosX = .025;
 shapePosY = .02;
 shapePosZ = 0;
 shapeScale = 0.013;

// a perspective camera
camera = m.PerspectiveCamera(2.5*dim, 2.3*dim);

// two lights for the scene
light1 = m.PointLight.Transform(m.Translate3(0, .3, .3));
light2 = m.PointLight.Transform(m.Translate3(0, -.4, 0));
light = m.UnionGeometry(light1, light2 );

// a behavior used to rock the text back and forth
 extent = (3.1415 / 2) * 0.25;
 rotTime = 3
 ang1 = m.Interpolate( 0 , extent, rotTime);
 ang2 = m.Interpolate(extent, -extent, 2*rotTime);
 ang3 = m.Interpolate(-extent, 0, rotTime);
 ang = m.SequenceArray(new Array(ang1, ang2, ang3)).RepeatForever();

//
//Make all the text meshes
//
 text_xf1 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf1.String = "Disc";
 result = m.ApplyDXTransform(text_xf1, null, null);
 discGeo = result.OutputBvr;
 discGeo = discGeo.DiffuseColor(m.Yellow).Transform(m.Scale3Uniform(textScale));
 discGeo = discGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 discGeo = discGeo.Transform(m.Translate3( textPosX, textPosY, textPosZ ));

 text_xf2 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf2.String = "Sheet";
 result = m.ApplyDXTransform(text_xf2, null, null);
 sheetGeo = result.OutputBvr;
 sheetGeo = sheetGeo.DiffuseColor(m.Red).Transform(m.Scale3Uniform(textScale));
 sheetGeo = sheetGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 sheetGeo = sheetGeo.Transform(m.Translate3( textPosX, textPosY, textPosZ ));

 text_xf3 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf3.String = "Cylinder";
 result = m.ApplyDXTransform(text_xf3, null, null);
 cylinderGeo = result.OutputBvr;
 cylinderGeo = cylinderGeo.DiffuseColor(m.Green).Transform(m.Scale3Uniform(textScale));
 cylinderGeo = cylinderGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 cylinderGeo = cylinderGeo.Transform(m.Translate3( textPosX, textPosY, textPosZ ));

 text_xf4 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf4.String = "Cone";
 result = m.ApplyDXTransform(text_xf4, null, null);
 coneGeo = result.OutputBvr;
 coneGeo = coneGeo.DiffuseColor(m.Teal).Transform(m.Scale3Uniform(textScale));
 coneGeo = coneGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 coneGeo = coneGeo.Transform(m.Translate3( textPosX, textPosY, textPosZ ));

 text_xf5 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf5.String = "Sphere";
 result = m.ApplyDXTransform(text_xf5, null, null);
 sphereGeo = result.OutputBvr;
 sphereGeo = sphereGeo.DiffuseColor(m.Blue).Transform(m.Scale3Uniform(textScale));
 sphereGeo = sphereGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 sphereGeo = sphereGeo.Transform(m.Translate3( textPosX, textPosY, textPosZ ));

 text_xf6 =new ActiveXObject("DX3DTransform.Microsoft.Text3D"); 
 text_xf6.String = "Hemisphere";
 result = m.ApplyDXTransform(text_xf6, null, null);
 hemisphereGeo = result.OutputBvr;
 hemisphereGeo = hemisphereGeo.DiffuseColor(m.Cyan).Transform(m.Scale3Uniform(textScale));
 hemisphereGeo = hemisphereGeo.Transform(m.Rotate3Anim(m.YVector3, ang) );
 hemisphereGeo = hemisphereGeo.Transform(m.Translate3( .5*textPosX, textPosY, textPosZ ));//because it's so long, move it right

//
//Now we make all the shape geometries
//
 shape_xf1 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf1.Shape = "DISC";
 result = m.ApplyDXTransform(shape_xf1, imgs, null);
 discShapeGeo = result.OutputBvr;
 discShapeGeo = discShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 discShapeGeo = discShapeGeo.Transform(m.Rotate3Rate(m.ZVector3,.417));
 discShapeGeo = discShapeGeo.Transform(m.Scale3Uniform(shapeScale));
 discShapeGeo = discShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

 shape_xf2 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf2.Shape = "SHEET";
 result = m.ApplyDXTransform(shape_xf2, imgs, null);
 sheetShapeGeo = result.OutputBvr;
 sheetShapeGeo = sheetShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 sheetShapeGeo = sheetShapeGeo.Transform(m.Rotate3Rate(m.ZVector3,.417));
 sheetShapeGeo = sheetShapeGeo.Transform(m.Scale3Uniform(shapeScale));
 sheetShapeGeo = sheetShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

 shape_xf3 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf3.Shape = "CYLINDER";
 result = m.ApplyDXTransform(shape_xf3, imgs, null);
 cylinderShapeGeo = result.OutputBvr;
 cylinderShapeGeo = cylinderShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 cylinderShapeGeo = cylinderShapeGeo.Transform(m.Rotate3Rate(m.ZVector3,.417));
 cylinderShapeGeo = cylinderShapeGeo.Transform(m.Scale3Uniform(shapeScale*0.5)); //It's so huge!
 cylinderShapeGeo = cylinderShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

 shape_xf4 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf4.Shape = "CONE";
 result = m.ApplyDXTransform(shape_xf4, imgs, null);
 coneShapeGeo = result.OutputBvr;
 coneShapeGeo = coneShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 coneShapeGeo = coneShapeGeo.Transform(m.Rotate3Rate(m.ZVector3,.417));
 coneShapeGeo = coneShapeGeo.Transform(m.Scale3Uniform(shapeScale));
 coneShapeGeo = coneShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

 shape_xf5 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf5.Shape = "SPHERE";
 result = m.ApplyDXTransform(shape_xf5, imgs, null);
 sphereShapeGeo = result.OutputBvr;
 sphereShapeGeo = sphereShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 sphereShapeGeo = sphereShapeGeo.Transform(m.Rotate3Rate(m.ZVector3,.417));
 sphereShapeGeo = sphereShapeGeo.Transform(m.Scale3Uniform(shapeScale));
 sphereShapeGeo = sphereShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

 shape_xf6 =new ActiveXObject("DX3DTransform.Microsoft.Shapes");
 shape_xf6.Shape = "HEMISPHERE";
 result = m.ApplyDXTransform(shape_xf6, imgs, null);
 hemisphereShapeGeo = result.OutputBvr;
 hemisphereShapeGeo = hemisphereShapeGeo.Transform(m.Rotate3Rate(m.XVector3,.2));
 hemisphereShapeGeo = hemisphereShapeGeo.Transform(m.Rotate3Rate(m.YVector3,.417));
 hemisphereShapeGeo = hemisphereShapeGeo.Transform(m.Scale3Uniform(shapeScale));
 hemisphereShapeGeo = hemisphereShapeGeo.Transform(m.Translate3(shapePosX, shapePosY, shapePosZ));

//Then for the BlackHole, which displays each of the meshes in turn
 bh_xf =new ActiveXObject("DX3DTransform.Microsoft.BlackHole");
 bh_xf.HoleX = 0;
 bh_xf.HoleY = 0;
 bh_xf.HoleZ = -.01;
 bh_xf.Movement = "FALL";

//Timing for the blackhole transitions.
 rampTime = 3;
 holdTime = 3;

 inflate = m.Interpolate(1, 0, rampTime);
 holdIt = m.DANumber(0).Duration(holdTime);
 collapse= m.Interpolate(0, 1, rampTime);
 progress = m.SequenceArray(new Array(inflate, holdIt,collapse) ).RepeatForever();

//Now set up geometry behaviors in sequence, coordinated with the 
//timing of the blackhole transitions.

 geoTime = 2*rampTime + holdTime

 geo1 = coneGeo.Duration( 2*rampTime + holdTime);
 geo2 = coneShapeGeo.Duration( 2*rampTime + holdTime);
 bh_input = m.SequenceArray(
			new Array(
				sheetGeo.Duration(geoTime),
				sheetShapeGeo.Duration(geoTime),
				discGeo.Duration(geoTime),
				discShapeGeo.Duration(geoTime),
				coneGeo.Duration(geoTime),
				coneShapeGeo.Duration(geoTime),
				cylinderGeo.Duration(geoTime),
				cylinderShapeGeo.Duration(geoTime),
				sphereGeo.Duration(geoTime),
				sphereShapeGeo.Duration(geoTime),
				hemisphereGeo.Duration(geoTime),
				hemisphereShapeGeo.Duration(geoTime)
			)
									).RepeatForever();

//Assign this geometry behavior as an input to the transform. The transform sees
//it as one geometry, even though DA changes in over time. As usual, all transforms
//with input(s) take arrays as arguments.

 result = m.ApplyDXTransform(bh_xf, new Array(bh_input), progress);
 bhGeo = result.OutputBvr;

// render the output with the light and camera

// finalGeo = m.UnionGeometry(shapeGeo, bhGeo)
 finalImg = m.UnionGeometry(bhGeo, light).Render(camera);

 DAControl.Image = finalImg;     
     
// start the animation       
 DAControl.Start();

//-->
</SCRIPT>
<B>All the twelve 3D shapes and the transition between them are generated synthetically;</B> i.e., with a zero download size. This is possible by using three different transforms with DirectAnimation behaviors. The <B>Text3D</B> transform builds each of the 
3-D meshes for the words that describe each shape. The <B>Shapes</B> transform 
builds the meshes for each shape, texturing a grid image on each to highlight 
the shape as it spins in space. The <B>BlackHole</B> transform creates the transition from the 3-D words to 
the shape itself, in a <I>SequenceArray</I> of DAGeometry behaviors which 
repeats forever. </P></BODY></HTML>
