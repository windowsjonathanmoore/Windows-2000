/*++
Copyright (c) 1997-2000  Microsoft Corporation
Module Name:
        meddlg.java
Abstract:

Author:

Notes:
Revision History:
--*/

import java.awt.*;
import java.util.*;
import com.ms.ui.*;
import medctrls;


/////////////////////////////////////////////////////////////////////////
//  CLASS: meddlg
//
//  PURPOSE: Supporting class to NewDlg
//  DATE:    July 24, 1997
//
//  DESCRIPTION:
//      Dialog that allows the user to set/view media properties.
//
/////////////////////////////////////////////////////////////////////////

public class meddlg extends Dialog
{
    // Dialog title.
    public static final String DLG_TITLE = "Media Properties";

    // Button ids.
    public static final int NONE   = 0;
    public static final int OK     = 1;
    public static final int CANCEL = 2;

    // Resource Wizard generated UI.
    private final medctrls ctrls = new medctrls(this);

    // Parent frame of the dlg.
    private Frame m_ParentFrame = null;

    // The button that was use to close the dialog.
    private int m_ButtonId = NONE;

    // Stores media properties gathered from dialog controls.
    private MediaInfo m_Info = new MediaInfo();


    /////////////////////////////////////////////////////////////////////
    // Constructor
    /////////////////////////////////////////////////////////////////////
    public meddlg(Frame parent)
    {
        super(parent, DLG_TITLE, true);

        // select a font to use (ctrls needs this)
        Font font = new Font("Dialog", Font.PLAIN, 8);
        this.setFont(font);

        // create the UI generated by the Resource Wizard
        ctrls.CreateControls();

        // set default values
        m_Info.mediaName = "Audio";
        m_Info.format    = 8;
        m_Info.startAddr = "239.2.3.4";
        m_Info.numAddr   = 1;
        m_Info.startPort = 20000;
        m_Info.numPorts  = 1;
        m_Info.ttl       = 3;
        
        // initialize controls
        ctrls.cmbFormat.addItem("G711A");
        ctrls.cmbFormat.addItem("G711U");
        ctrls.cmbFormat.addItem("G723A");
        ctrls.cmbFormat.addItem("G723U");
        ctrls.cmbFormat.addItem("H261");
        ctrls.cmbFormat.addItem("H263");
        UpdateData(true);
 
        // get parent frame to use for message boxes
        m_ParentFrame = parent;
    }

    /////////////////////////////////////////////////////////////////////
    // action
    //
    // Event.ACTION_EVENT event handler.
    /////////////////////////////////////////////////////////////////////
    public boolean action(Event evt, Object arg)
    {
        if (arg.equals("OK")) 
		{
            // okay button pressed
            UpdateData(false);
            if (ValidateData()) 
			{
                m_ButtonId = OK;
                this.dispose();
            }
        }
        else if (arg.equals("Cancel")) 
		{
            // cancel button pressed
            m_ButtonId = CANCEL;
            this.dispose();
        }
        else 
		{
            return super.action(evt, arg);
        }
        return true;
    }

    /////////////////////////////////////////////////////////////////////
    // GetMediaInfo
    //
    // Call this after show() has returned to get the media properties
    // set by the user.  Returns a MediaInfo object with validated
    // fields if the OK button was pressed, and null otherwise.
    /////////////////////////////////////////////////////////////////////
    public MediaInfo GetMediaInfo()
    {
        if (m_ButtonId == OK)
            return m_Info;
        else
            return null;
    }

    /////////////////////////////////////////////////////////////////////
    // GetButtonId
    //
    // Returns the id of the button that was used to close the dialog.
    // May be NONE if the dialog is closed using the system menu, etc.
    /////////////////////////////////////////////////////////////////////
    public int GetButtonId()
    {
        return m_ButtonId;
    }

    /////////////////////////////////////////////////////////////////////
    // UpdateData
    //
    // If toControls is true, the values in the m_Info data fields
    // are put into the UI controls.  If toControls is false, data from
    // the dialog controls is collected and stored into the m_Info
    // objects.
    /////////////////////////////////////////////////////////////////////
    public void UpdateData(boolean toControls)
    {
        if (toControls) 
		{
            ctrls.tfName.setText(m_Info.mediaName);
            ctrls.cmbFormat.select(GetFormatName(m_Info.format));
            ctrls.tfAddress.setText(m_Info.startAddr);
            ctrls.tfCount.setText(m_Info.numAddr + "");
            ctrls.tfPort.setText(m_Info.startPort + "");
            ctrls.tfTTL.setText(m_Info.ttl + "");
        }
        else 
		{
            m_Info.mediaName = ctrls.tfName.getText().trim();
            m_Info.format = GetFormatCode(ctrls.cmbFormat.getSelectedItem());
            m_Info.startAddr = ctrls.tfAddress.getText().trim();
            m_Info.numAddr = Integer.parseInt(ctrls.tfCount.getText().trim());
            m_Info.startPort = Short.parseShort(ctrls.tfPort.getText().trim());
            m_Info.numPorts = 1;
            m_Info.ttl = Byte.parseByte(ctrls.tfTTL.getText().trim());
        }
    }

    /////////////////////////////////////////////////////////////////////
    // ValidateData
    //
    // Returns true if the m_Info data fields contain valid data.
    // If any of the fields are incorrect, a message is displayed to the
    // user.
    /////////////////////////////////////////////////////////////////////
    public boolean ValidateData()
    {
        if (m_Info.mediaName.equals("")) 
		{
            DoMessage("The Media Name field must not be blank");
            return false;
        }

        if (!isIPAddr(m_Info.startAddr)) 
		{
            DoMessage("The Start Address field must be in A.B.C.D " +
                      "format.  Where A, B, C, and D are 0-255.");
            return false;
        }

        if (m_Info.numAddr < 1) 
		{
            DoMessage("The Count field must be an integer greater than 1.");
            return false;
        }

        if (m_Info.startPort < 20000) 
		{
            DoMessage("The Port field must be greater than or equal to 20000");
            return false;
        }

        return true;
    }

    /////////////////////////////////////////////////////////////////////
    // GetFormatName
    //
    // Returns the name of the media with the given format code.
    /////////////////////////////////////////////////////////////////////
    private String GetFormatName(byte code)
    {
        switch (code)
        {
        case 0:  return "G711U";
        case 4:  return "G723";
        case 8:  return "G711A";
        case 31: return "H261";
        case 34: return "H263";
        default: return "Unknown Media Format";
        }
    }

    /////////////////////////////////////////////////////////////////////
    // GetFormatCode
    //
    // Returns the code of the named media format or -1 if the name
    // is not recognized.
    /////////////////////////////////////////////////////////////////////
    private byte GetFormatCode(String name)
    {
        if (name.equals("G711U"))
            return 0;

        if (name.equals("G723"))
            return 4;

        if (name.equals("G711A"))
            return 8;

        if (name.equals("H261"))
            return 31;

        if (name.equals("H263"))
            return 34;

        return -1;
    }

    /////////////////////////////////////////////////////////////////////
    // isIPAddr
    //
    // Returns true if the given string is an IP address in dotted-
    // decimal format (ie, a.b.c.d) and false otherwise.
    /////////////////////////////////////////////////////////////////////
    private boolean isIPAddr(String addr)
    {
        StringTokenizer st=null;
        int[]           toks = new int[4];

        st = new StringTokenizer(addr, ".");

        if (st.countTokens() != 4 )
            return false;

        try 
		{
            for (int i=0; i < 4; i++) 
			{
                toks[i] = Integer.parseInt(st.nextToken());
            }
        }
        catch (NumberFormatException e) 
		{
            e.printStackTrace();
            return false;
        }

        return true;
    }

    /////////////////////////////////////////////////////////////////////
    // DoMessage
    //
    // Displays messages in a message box.
    /////////////////////////////////////////////////////////////////////
    private void DoMessage(String msg)
    {
        AwtUIMessageBox msgbox = new AwtUIMessageBox(
                                            m_ParentFrame,
                                            DLG_TITLE,
                                            msg,
                                            AwtUIMessageBox.EXCLAMATION,
                                            UIButtonBar.OK
                                            );
        msgbox.doModal();
    }
}