/*++
Copyright (c) 1997-2000  Microsoft Corporation
Module Name:
        infodlg.java
Abstract:

Author:

Notes:
Revision History:
--*/

import java.awt.*;
import java.util.*;
import com.ms.com.*;
import com.ms.ui.*;
import rend.*;
import sdpblb.*;
import infoctrls;
import confinfo;
import svtime;


/////////////////////////////////////////////////////////////////////////
//  CLASS: infodlg
//
//  PURPOSE: Supporting class to JT3Conf
//  DATE:    July 24, 1997
//
//  DESCRIPTION:
//      Dialog that allows the user to view information for a
//      conference.
//
/////////////////////////////////////////////////////////////////////////

public class infodlg extends Dialog
    implements DIRECTORY_TYPE,
			   DIRECTORY_OBJECT_TYPE
{
    // Dialog title.
    public static final String DLG_TITLE = "Conference Info";

    // Button ids.
    public static final int NONE   = 0;
    public static final int CREATE = 1;
    public static final int CLOSE  = 2;

    // Resource Wizard generated UI.
    private final infoctrls ctrls = new infoctrls(this);

    // Parent frame of the dlg.
    private Frame m_ParentFrame = null;

    // The button that was use to close the dialog.
    private int m_ButtonId = NONE;

    // Conference data fields.
    public String m_strConfName;
    public String m_strDesc;
    public String m_strUserName;

    public short  m_nStartYear;
    public byte   m_nStartMonth;
    public byte   m_nStartDay;
    public byte   m_nStartHour;
    public byte   m_nStartMinute;

    public short  m_nStopYear;
    public byte   m_nStopMonth;
    public byte   m_nStopDay;
    public byte   m_nStopHour;
    public byte   m_nStopMinute;


    /////////////////////////////////////////////////////////////////////
    // Constructor
    /////////////////////////////////////////////////////////////////////
    public infodlg(Frame parent, confinfo conf)
    {
		super(parent, DLG_TITLE, true);
		String descr;

        try 
		{   
			// select a font to use (ctrls needs this)
			Font font = new Font("Dialog", Font.PLAIN, 8);
			this.setFont(font);

			// create the UI generated by the Resource Wizard
			ctrls.CreateControls();

			// get parent frame to use for message boxes
			m_ParentFrame = parent;			

			setBackground(Color.cyan);

			if (conf != null)
			{			
				// put conference information into controls
				ctrls.tfConfName.setText(conf.cnfName);
				ctrls.tfUserName.setText(conf.cnfOriginator);
				if (conf.cnfDesc == null)
					ctrls.taDesc.setText("No Description Available");
				else
					ctrls.taDesc.setText(conf.cnfDesc);

				// get and parse the conference time info
				double stime;
				stime = conf.cnfStart; 
				short[] pYear = new short[1];
				short[]  pMonth = new short[1];
				short[]  pDay = new short[1];
				short[]  pHour = new short[1];
				short[]  pMin = new short[1];
				svtime.getVTime (stime, pYear, pMonth, pDay, pHour, pMin);
				ctrls.tfStartYear.setText(pYear[0] + "");
				ctrls.tfStartMonth.setText(GetMonthName(pMonth[0]));
				ctrls.tfStartDay.setText(pDay[0] + "");
				ctrls.tfStartHour.setText(pHour[0] + "");
				ctrls.tfStartMinute.setText(pMin[0] + "");
            
				double etime;
				etime = conf.cnfEnd; 
				svtime.getVTime (etime, pYear, pMonth, pDay, pHour, pMin);
				ctrls.tfStopYear.setText(pYear[0] + "");
				ctrls.tfStopMonth.setText(GetMonthName(pMonth[0]));
				ctrls.tfStopDay.setText(pDay[0] + "");
				ctrls.tfStopHour.setText(pHour[0] + "");
				ctrls.tfStopMinute.setText(pMin[0] + "");						
			}
		}
		catch (ComException e) 
		{
			e.printStackTrace();
			DoMessage("An error occurred while reading the " +
				      "conference information");
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			DoMessage("An error occurred while reading the " +
				      "conference information");
		}
	}



    /////////////////////////////////////////////////////////////////////
    // action
    //
    // Event.ACTION_EVENT event handler.
    /////////////////////////////////////////////////////////////////////
    public boolean action(Event evt, Object arg)
    {
        if (arg.equals("Close")) 
		{
            // close button pressed
            m_ButtonId = CLOSE;
            this.dispose();
        }
        else 
		{
            return super.action(evt, arg);
        }
        return true;
    }

    /////////////////////////////////////////////////////////////////////
    // GetButtonId
    //
    // Returns the id of the button that was used to close the dialog.
    // May be NONE if the dialog is closed using the system menu, etc.
    /////////////////////////////////////////////////////////////////////
    public int GetButtonId()
    {
        return m_ButtonId;
    }

    /////////////////////////////////////////////////////////////////////
    // GetMonthName
    //
    // Returns the name of the ith month where January is month 1.
    /////////////////////////////////////////////////////////////////////
    public String GetMonthName(short i)
    {
        switch (i)
        {
        case 1:  return "January";
        case 2:  return "February";
        case 3:  return "March";
        case 4:  return "April";
        case 5:  return "May";
        case 6:  return "June";
        case 7:  return "July";
        case 8:  return "August";
        case 9:  return "September";
        case 10: return "October";
        case 11: return "November";
        case 12: return "December";
        default: return null;
        }
    }

    /////////////////////////////////////////////////////////////////////
    // DoMessage
    //
    // Displays messages in a message box.
    /////////////////////////////////////////////////////////////////////
    private void DoMessage(String msg)
    {
        AwtUIMessageBox msgbox = new AwtUIMessageBox(
                                            m_ParentFrame,
                                            DLG_TITLE,
                                            msg,
                                            AwtUIMessageBox.EXCLAMATION,
                                            UIButtonBar.OK
                                            );
        msgbox.doModal();
    }
}

