// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (3171d071).
//
// MSEIGFT.tli
//
// Wrapper implementations for Win32 type library C:\\Program Files\\Host Integration Server\\system\\MSEIGFT.DLL
// compiler-generated file created 01/22/01 at 02:15:45 - DO NOT EDIT!

#pragma once

//
// dispinterface _IEIGFileTransferCtlEvents wrapper method implementations
//

inline HRESULT _IEIGFileTransferCtlEvents::ConnectionStateChange ( eigConnectionStateEnum constate ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", constate);
    return _result;
}

inline HRESULT _IEIGFileTransferCtlEvents::TransferProgress ( short PercentageDone ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0002", PercentageDone);
    return _result;
}

inline HRESULT _IEIGFileTransferCtlEvents::ReportError ( long hr, _bstr_t Text ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0008", hr, (BSTR)Text);
    return _result;
}

inline HRESULT _IEIGFileTransferCtlEvents::TransferComplete ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IEIGFileTransferCtl wrapper method implementations
//

inline eigConnectionTypeEnum IEIGFileTransferCtl::GetConnectionType ( ) {
    eigConnectionTypeEnum _result;
    HRESULT _hr = get_ConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutConnectionType ( eigConnectionTypeEnum pVal ) {
    HRESULT _hr = put_ConnectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetRDBName ( ) {
    BSTR _result;
    HRESULT _hr = get_RDBName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutRDBName ( _bstr_t pVal ) {
    HRESULT _hr = put_RDBName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetUserID ( ) {
    BSTR _result;
    HRESULT _hr = get_UserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutUserID ( _bstr_t pVal ) {
    HRESULT _hr = put_UserID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetPassword ( ) {
    BSTR _result;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_Password(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IEIGFileTransferCtl::GetPCCodePage ( ) {
    short _result;
    HRESULT _hr = get_PCCodePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutPCCodePage ( short pVal ) {
    HRESULT _hr = put_PCCodePage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IEIGFileTransferCtl::GetCCSID ( ) {
    short _result;
    HRESULT _hr = get_CCSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutCCSID ( short pVal ) {
    HRESULT _hr = put_CCSID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline eigConnectionStateEnum IEIGFileTransferCtl::GetConnectionState ( ) {
    eigConnectionStateEnum _result;
    HRESULT _hr = get_ConnectionState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEIGFileTransferCtl::GetLocalLU ( ) {
    BSTR _result;
    HRESULT _hr = get_LocalLU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutLocalLU ( _bstr_t pVal ) {
    HRESULT _hr = put_LocalLU(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetRemoteLU ( ) {
    BSTR _result;
    HRESULT _hr = get_RemoteLU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutRemoteLU ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteLU(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetModeName ( ) {
    BSTR _result;
    HRESULT _hr = get_ModeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutModeName ( _bstr_t pVal ) {
    HRESULT _hr = put_ModeName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetNetAddr ( ) {
    BSTR _result;
    HRESULT _hr = get_NetAddr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutNetAddr ( _bstr_t pVal ) {
    HRESULT _hr = put_NetAddr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEIGFileTransferCtl::GetNetPort ( ) {
    BSTR _result;
    HRESULT _hr = get_NetPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEIGFileTransferCtl::PutNetPort ( _bstr_t pVal ) {
    HRESULT _hr = put_NetPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEIGFileTransferCtl::Connect ( ) {
    HRESULT _hr = raw_Connect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIGFileTransferCtl::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIGFileTransferCtl::PutFile ( _bstr_t hostFile, _bstr_t LocalFile ) {
    HRESULT _hr = raw_PutFile(hostFile, LocalFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIGFileTransferCtl::GetFile ( _bstr_t LocalFile, _bstr_t hostFile ) {
    HRESULT _hr = raw_GetFile(LocalFile, hostFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIGFileTransferCtl::Cancel ( ) {
    HRESULT _hr = raw_Cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline eigAnswerYesNoEnum IEIGFileTransferCtl::GetOverwriteHostFile ( ) {
    eigAnswerYesNoEnum _result;
    HRESULT _hr = get_OverwriteHostFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutOverwriteHostFile ( eigAnswerYesNoEnum pVal ) {
    HRESULT _hr = put_OverwriteHostFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline eigAnswerYesNoEnum IEIGFileTransferCtl::GetAppendToEnd ( ) {
    eigAnswerYesNoEnum _result;
    HRESULT _hr = get_AppendToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutAppendToEnd ( eigAnswerYesNoEnum pVal ) {
    HRESULT _hr = put_AppendToEnd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline eigAnswerYesNoEnum IEIGFileTransferCtl::GetCreateIfNonExisting ( ) {
    eigAnswerYesNoEnum _result;
    HRESULT _hr = get_CreateIfNonExisting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEIGFileTransferCtl::PutCreateIfNonExisting ( eigAnswerYesNoEnum pVal ) {
    HRESULT _hr = put_CreateIfNonExisting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
