// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "eigdataqueue.h"

// Dispatch interfaces referenced by this interface
#include "EIGDataQueueItemW.h"


/////////////////////////////////////////////////////////////////////////////
// CEIGDataQueue properties

/////////////////////////////////////////////////////////////////////////////
// CEIGDataQueue operations

CString CEIGDataQueue::GetQueueName()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CEIGDataQueue::AddQueueItem(LPDISPATCH QueueItem, long fBlock)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 QueueItem, fBlock);
}

void CEIGDataQueue::SetAttrib(long Attribute, const VARIANT& Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Attribute, &Value);
}

void CEIGDataQueue::ClearAll(long Overwrite)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Overwrite);
}

void CEIGDataQueue::CreateQueue(short MaxMsgLength, long QAuthority, long QueueClass, long AddSenderInfo, short CCSID, short InitialSize, BOOL queueLoc, long recordLenCls, LPCTSTR Title, long AllowDupKeys, short MakeKeyLen)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_BOOL VTS_I4 VTS_BSTR VTS_I4 VTS_I2;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 MaxMsgLength, QAuthority, QueueClass, AddSenderInfo, CCSID, InitialSize, queueLoc, recordLenCls, Title, AllowDupKeys, MakeKeyLen);
}

void CEIGDataQueue::DeleteQueue(long OverwriteData)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 OverwriteData);
}

CEIGDataQueueItemW CEIGDataQueue::GetQueueItem(long QueueType, long BlockComplete, long PeekQItem, long ProvideExtInfo, short TimeOut, long UserProfile, long SenderInfo, const VARIANT& SearchKey, long SearchOrder)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		QueueType, BlockComplete, PeekQItem, ProvideExtInfo, TimeOut, UserProfile, SenderInfo, &SearchKey, SearchOrder);
	return CEIGDataQueueItemW(pDispatch);
}

void CEIGDataQueue::StopQueue()
{
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

VARIANT CEIGDataQueue::QueryAttribute(long Attribute)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Attribute);
	return result;
}

void CEIGDataQueue::CancelQueue(short CancelReqCount, long CancelReqType, const VARIANT& KeyValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 CancelReqCount, CancelReqType, &KeyValue);
}
