<html>

<head>
<title>Name of Your Feature/Service</title>
<link rel="stylesheet" href="../../styles.css" type="text/css">
<style>
A:link {color: Olive}
A:visited {color: 336666}
A:hover {background:Olive; color: White}

UL { list-style-image:"url('../images/BLACKARROW.GIF')"}

</style>
</head>

<body>

<h2>Entity Proxy Data Services</h2>

<hr>
<h4>Overview</h4>
<p>
Scalability is a primary requirement in Windows DNA applications, particularly when they are destined for the Internet or large Intranet. "Entity Proxy" is a set of components for data access, movement and manipulation that have been deisgned for scalability; this is evident in the implementation’s choice of technologies (ODBC API, C++, ATL). However usability and approachability are also key goals, as a result the implementation is presented as a series of COM components that a developer can make use of in their choice of language (VB, C++, Java, Script / ASP etc.). The developer simply utilizes the framework’s collection-like interface to access data, without having to deal with the complexities of the powerful ODBC API.
</p>
<p>
The two principal components of the implementation framework are the Data Entity (typelibrary name and PROGID DataServices.Entity) and the Data Proxy (DataServices.Proxy). As their name suggests they are data related, each having a specific task: Data Entities (and Resultsets of Data Entities) carry data sets throughout the application (including being automatically marshalled by value across tiers). The Data Proxy provides a mechanism for Data Entities to interact with a data store (SQL Server in the current implementation). A secondary component the Dynamic Collection (DataServices.Dynamic) can be used as a generic, Visual Basic compatible, collection that also has the ability to be marshaled by value (it implements the IMarshal and IPersistStream interfaces).

See the <A href="EntityProxy.htm#Remarks">Remarks</A> section below for a description of the objects and their interfaces.</p>

<h4>Project Files</h4>
<TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
  <tr>
    <td width="26%"><strong>File</strong></td>
    <td width="74%"><strong>Description</strong></td>
  </tr>
  <tr>
	<td>
	string.cpp, string_fast.cpp
	</td>
	<td>
	Optimized String Class
	</td>
  </tr>
  <tr>
	<td>
	heap.cpp
	</td>
	<td>
	Heap code - Fixed Allocator
	</td>
  </tr>
  <tr>
	<td>
	proxy.cpp, proxy_except.cpp
	</td>
	<td>
	Data Proxy implementation
	</td>
  </tr>
  <tr>
	<td>
	entity.cpp, entity_except.cpp
	</td>
	<td>
	Data Entity implementation
	</td>
  </tr>
  <tr>
	<td>
	dynamic.cpp
	</td>
	<td>
	Generic marshal-by-value collection implementation
	</td>
  </tr>
  <tr>
	<td>
	ODBCData.cpp
	</td>
	<td>
	ODBC API specific code, base class for Data Proxy
	</td>
  </tr>
  <tr>
	<td>
	resultset.cpp
	</td>
	<td>
	Entity Resultset implementation
	</td>
  </tr>
  <tr>
	<td>
	pooleddata.cpp
	</td>
	<td>
	COM+ object pooling support for Data Proxy, base class of CODBCData
	</td>
  </tr>
  <tr>
	<td>
	utils.cpp
	</td>
	<td>
	Misc support classes and functions
	</td>
  </tr>
</TABLE></TABLE>
<P></P></TR></TABLE>


<h4>To Build</h4>
<P>
<b>VC:</b> Either open and build <b>DataServices\Data.dsw</b> or run <b>NMAKE -A</b> from the command line at the <b>DataServices\</b> folder<br>
<b>VB:</b> Open and make the <b>EPGen\EPGen.vbp</b> project<br>
<b>VB:</b> Open and make the <b>EPTest\EPTest.vbp</b> project<br>
</P>

<h4>To Run</h4>
<P>Click <A href="running.htm">here</A> for detailed instructions on how to set 
up and run Entity Proxy Data Services.</P>
<P><A name=Remarks><STRONG>Remarks</STRONG></A></P>
<p><STRONG>Objects Provided by the 
sample:</STRONG>               </p>
<OL>
<li><STRONG>DataServices.Proxy - </STRONG>the Proxy is the object that provides access to the database. It supports the following methods on the default IDataProxy interface:
<P>
  <TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
    
    <TR>
      <TD width="50%"><STRONG>Method / Property</STRONG></TD>
      <TD width="50%"><STRONG>Action / Item</STRONG></TD></TR>
    <TR>
      <TD width="50%"><STRONG>Execute</STRONG>([in] BSTR SQLString, [out, retval] long *Result) </TD>
      <TD width="50%">Execute a SQL String as fast as possible, if a 
        result is requested (i.e. a non-null value is passed in for the Result 
        parameter), then the first row of the first column in the resultset is returned as&nbsp;a long.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>ManualConstruct</STRONG>([in] BSTR 
        ConstructString);</TD>
      <TD width="50%">   Construct the DB   connection using the provided connection string e.g."DSN=Northwind;UID=sa;PWD="</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityUpdate</STRONG>([in]IEntityData 
        *Entity, [out, retval] long *Result);</TD>
      <TD width="50%">Update the database using a given entity as it's 
        source</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityLoad</STRONG>([in] BSTR 
        ReadStoredProc, [in] BSTR UpdateStoredProc, [in] BSTR DeleteStoredProc, 
        [in] BSTR InsertStoredProc, [in] BSTR KeyField, [in] VARIANT KeyValue, 
        [out, optional] long *Result, [out, retval] IEntityData **Entity);</TD>
      <TD width="50%">Load an entity from the database. Entity 
        meta-data is built from the resultset schema information.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityQuery</STRONG>([in]BSTR SQLString, 
        [out, optional] long * Result, [in, optional] BSTR ReadStoredProc, [in, 
        optional] BSTR UpdateStoredProc, [in, optional] BSTR DeleteStoredProc, 
        [in, optional] BSTR InsertStoredProc, [in, optional] BSTR KeyField, 
        [out, retval] IResultset **Resultset);</TD>
      <TD width="50%">Query for a collection of entities. The results 
        are returned in a DataServices.Resultset.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityRead</STRONG>([in] IEntityData 
        *Entity, [out, retval] long *Results);</TD>
      <TD width="50%">Retrieve an entity's data from the database. 
        Meta-data is not built from resultset schema. i.e. the correct metadata 
        must already exist.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityLookup</STRONG>([in]BSTR 
        SQLString, [out, optional] long * Result, [in, optional] BSTR 
        ReadStoredProc, [in, optional] BSTR UpdateStoredProc, [in, optional] 
        BSTR DeleteStoredProc, [in, optional] BSTR InsertStoredProc, [in, 
        optional] BSTR KeyField, [out, retval] IEntityData **Entity);</TD>
      <TD width="50%">Lookup entities - first found is returned. Use 
        NextEntity for subsequent entities.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>NextEntity</STRONG>([out, retval] 
        IEntityData **Entity);</TD>
      <TD width="50%">Retrieve the next entity from the current lookup 
        set</TD></TR>
    <TR>
      <TD width="50%"><STRONG>LookupFree</STRONG>();</TD>
      <TD width="50%">Free up resources used in the current entity 
        lookup</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityDelete</STRONG>([in] IEntityData 
        *Entity, [out, retval] long *Result);</TD>
      <TD width="50%">Delete the entity from the database</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EntityInsert</STRONG>(IEntityData 
        *Entity, [out, retval] long *Result);</TD>
      <TD width="50%">Insert into the database using a given entity as 
        it's source</TD></TR>
    <TR>
      <TD width="50%"><STRONG>NextResultset</STRONG>([out, optional] 
        long * Result, [out, retval] IResultset **Resultset);</TD>
      <TD width="50%">Retrieve the next Resultset for the current 
        query. This may be used if a query or stored procedure returns multiple 
        resultsets.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>NextLookup</STRONG>([out, optional] long 
        *Result, [out, retval] IEntityData **Entity);</TD>
      <TD width="50%">Retrieve the first entity of the next set of 
        results for the current lookup. This may be used if a query or stored 
        procedure returns multiple resultsets.</TD></TR>
    <TR>
      <TD width="50%"><STRONG>RSQuery</STRONG>([in] BSTR QueryText, 
        [out, optional] VARIANT *Result, [out, retval] _Recordset ** Recordset);</TD>
      <TD width="50%">Query for an ADO Recordset and SP return value 
        (int) - read only and disconnected</TD></TR>
    <TR>
      <TD width="50%"><STRONG>RSQueryRW</STRONG>([in] BSTR QueryText, 
        [out, optional] VARIANT *Result, [out, retval] _Recordset **rs);</TD>
      <TD width="50%">Query for an ADO Recordset and SP return value 
        (int) - read/write and disconnected</TD></TR>
    <TR>
      <TD width="50%"><STRONG>RSUpdate</STRONG>(_Recordset *rs);</TD>
      <TD width="50%">Update the database using the given ADO 
        recordset as a source</TD></TR></TABLE>       

  </P></CODE>
  <LI><CODE>
  <P>      
    </CODE><STRONG>DataServices.Entity</STRONG> - represents a "Data 
  Entity". This object will contain the data and meta-data that represents a 
  business entity. This could be as simple as a single row from a database 
  table, or complex join. Equally the Entity can be build programatically to 
  represent a structure independant of the database. The object supports two 
  interfaces IEntityData and IEntity. 
  
  <P><STRONG>IEntityData </STRONG> is a low level interface that 
  provides read/write access to the entity's meta-data as well as it's data:</P>
  <TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
    
    <TR>
      <TD width="50%"><STRONG>Method&nbsp;/ Property</STRONG> </TD>
      <TD width="50%"><STRONG>Action / Item</STRONG>  </TD></TR>
    <TR>
      <TD width="50%"><STRONG>Item</STRONG>([in] VARIANT* Index, [out, retval] 
        VARIANT* pvarRet);</TD>
      <TD width="50%">Given an index, returns an item in the 
      structure</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Add</STRONG>([in] VARIANT* Item, [in, optional] VARIANT* 
        Key, [in, optional] VARIANT* Before, [in, optional] VARIANT* After);</TD>
      <TD width="50%">Adds an item to the structure</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Count</STRONG>([out, retval] long* pi4);</TD>
      <TD width="50%">Returns number of items in structure</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Remove</STRONG>([in] VARIANT* Index);</TD>
      <TD width="50%">Removes an item from the structure</TD></TR>
    <TR>
      <TD width="50%">_<STRONG>NewEnum</STRONG>([out, retval] IUnknown** ppunk);</TD>
      <TD width="50%">Return an enumerator for this entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Initialize</STRONG>(long Size);</TD>
      <TD width="50%">Initialize the structure to a given size</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EditMode</STRONG>([in] ColEditModeEnum newVal);</TD>
      <TD width="50%">The EditMode represents the current state of 
        the entity data</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Key</STRONG>(long Index, [in] BSTR newVal);</TD>
      <TD width="50%">The name of a field in the entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Insert</STRONG>([in] long Index, [in] BSTR Key, [in] 
        VARIANT *pVal);</TD>
      <TD width="50%">Insert a metadata item into the entity</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>Field</STRONG>([in] VARIANT *Index, [out, retval] 
        VARIANT *pVal);</P> <P><STRONG>Field</STRONG>([in] VARIANT *Index, [in] VARIANT *pVal);</P></TD>
      <TD width="50%">Entity Data Item</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Recordset</STRONG>([in] _Recordset* newVal);</TD>
      <TD width="50%">Assign an ADO record to an entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>UpdateCommand</STRONG>([out, retval] BSTR *pVal);</TD>
      <TD width="50%">Retrieve the internal UpdateCommand for this 
        entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>ReadCommand</STRONG>([out, retval] BSTR *pVal);</TD>
      <TD width="50%">Retrieve the internal ReadCommand for this 
        entity</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>UpdateStoredProcedure</STRONG>([in] BSTR newVal);</P><P><STRONG>UpdateStoredProcedure</STRONG> 
        ([out, retval] BSTR *pVal);</P></TD>
      <TD width="50%">Stored procedure used for storing entity data 
        to the database</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>ReadStoredProcedure</STRONG>([in] BSTR newVal); </P><P><STRONG>ReadStoredProcedure</STRONG>
        ([out, retval] BSTR *pVal);</P></TD>
      <TD width="50%">Stored procedure used for reading an entity 
        from the database</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>KeyField</STRONG>([in] BSTR newVal);</P><P><STRONG>KeyField</STRONG> ([out, 
        retval] BSTR *pVal);</P></TD>
      <TD width="50%">The database primary key field for this 
      entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Append</STRONG>(VARIANT *pItem, VARIANT *pKey);</TD>
      <TD width="50%">Append and item to the entity</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>DeleteStoredProcedure</STRONG>([out, retval] BSTR 
        *pVal);</P><P><STRONG>DeleteStoredProcedure</STRONG> ([in] BSTR newVal);</P></TD>
      <TD width="50%">Stored procedure used for deleting an entity 
        from the database</TD></TR>
    <TR>
      <TD width="50%"><STRONG>DeleteCommand</STRONG>([out, retval] BSTR *pVal);</TD>
      <TD width="50%">Retrieve the internal DeleteCommand for this 
        entity</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>InsertStoredProcedure</STRONG>([out, retval] BSTR 
        *pVal);</P><P><STRONG>InsertStoredProcedure</STRONG> ([in] BSTR newVal);</P></TD>
      <TD width="50%">Stored procedure used for inserting an entity 
        into the database</TD></TR>
    <TR>
      <TD width="50%"><STRONG>InsertCommand</STRONG>([out, retval] BSTR *pVal);</TD>
      <TD width="50%">Retrieve the internal InsertCommand for this 
        entity</TD></TR>
  </TABLE>


<P><STRONG>IEntity </STRONG> is a high level interface that provides read/write access to the 
entity's mdata:</P>

  <TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
    
    <TR>
      <TD width="50%"><STRONG>Method&nbsp;/ Property</STRONG> </TD>
      <TD width="50%"><STRONG>Action / Item</STRONG>  </TD></TR>
    <TR>
      <TD width="50%"><STRONG>Item</STRONG>([in] VARIANT* Index, [out, retval] 
        VARIANT* pvarRet);</TD>
      <TD width="50%">Given an index, returns an item in the 
      structure</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Count</STRONG>([out, retval] long* pi4);</TD>
      <TD width="50%">Returns number of items in structure</TD></TR>
    <TR>
      <TD width="50%">_<STRONG>NewEnum</STRONG>([out, retval] IUnknown** ppunk);</TD>
      <TD width="50%">Return an enumerator for this entity</TD></TR>
    <TR>
      <TD width="50%"><STRONG>EditMode</STRONG>([in] ColEditModeEnum newVal);</TD>
      <TD width="50%">The EditMode represents the current state of 
        the entity data</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Key</STRONG>(long Index, [in] BSTR newVal);</TD>
      <TD width="50%">The name of a field in the entity</TD></TR>
    <TR>
      <TD width="50%"><P><STRONG>Field</STRONG>([in] VARIANT *Index, [out, retval] 
        VARIANT *pVal);</P> <P><STRONG>Field</STRONG>([in] VARIANT *Index, [in] VARIANT *pVal);</P></TD>
      <TD width="50%">Entity Data Item</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Recordset</STRONG>([in] _Recordset* newVal);</TD>
      <TD width="50%">Assign an ADO record to an entity</TD></TR>
  </TABLE>

  <P></P>
  <P>
</P>

<li><P><STRONG>DataServices.Resultset </STRONG>- represents 
  the results of a query. A resultset is a very simple collection that can only 
  contain DataServices.Entity Objects.</P>

  <TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
    
    <TR>
      <TD width="50%"><STRONG>Method&nbsp;/ Property</STRONG> </TD>
      <TD width="50%"><STRONG>Action / Item</STRONG>  </TD></TR>
    <TR>
      <TD width="50%"><STRONG>Record</STRONG> (long nIndex, [out, retval] 
        IEntityData **pVal);</TD>
      <TD width="50%">Given an index, returns an entity item in the 
      resultset</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Count</STRONG>([out, retval] long* pi4);</TD>
      <TD width="50%">Returns number of items in the resultset</TD></TR>
    <TR>
      <TD width="50%">_<STRONG>NewEnum</STRONG>([out, retval] IUnknown** ppunk);</TD>
      <TD width="50%">Return an enumerator for this resultset</TD></TR>
  </TABLE>

  <P>
</P>
<li><P><STRONG>DataServices.Dynamic </STRONG>- a generic 
  collection object that can marshal by value. Objects may be placed into the 
  collection (that implement IUnknown or IDispatch). When marsalling objects 
  will be QueryInterface'd for IPersistStream, and marshalled by value along 
  with the collection itself.</P>
  <TABLE border=1 cellPadding=1 cellSpacing=1 width="90%">
    <TR>
      <TD width="50%"><STRONG>Method&nbsp;/ Property</STRONG> </TD>
      <TD width="50%"><STRONG>Action / Item</STRONG>  </TD></TR>
    <TR>
      <TD width="50%"><STRONG>Item</STRONG>([in] VARIANT* Index, [out, retval] 
        VARIANT* pvarRet);</TD>
      <TD width="50%">Given an index, returns an item in the 
      collection</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Add</STRONG>([in] VARIANT* Item, [in, optional] VARIANT* 
        Key, [in, optional] VARIANT* Before, [in, optional] VARIANT* After);</TD>
      <TD width="50%">Adds an item to the collection</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Count</STRONG>([out, retval] long* pi4);</TD>
      <TD width="50%">Returns number of items in collection</TD></TR>
    <TR>
      <TD width="50%"><STRONG>Remove</STRONG>([in] VARIANT* Index);</TD>
      <TD width="50%">Removes an item from the collection</TD></TR>
    <TR>
      <TD width="50%">_<STRONG>NewEnum</STRONG>([out, retval] IUnknown** ppunk);</TD>
      <TD width="50%">Return an enumerator for this collection</TD></TR>
  </TABLE>

</li></OL>
<hr>
</body>
</html>
